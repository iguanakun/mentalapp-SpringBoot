<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mentalapp.cbt_basic.dao.CbtBasicsMapper">

    <!-- マッピング定義(CbtBasics) -->
    <resultMap type="com.mentalapp.cbt_basic.entity.CbtBasics" id="cbtBasicsWithFeels">
        <id column="id" property="id"/>
        <result column="fact" property="fact"/>
        <result column="mind" property="mind"/>
        <result column="body" property="body"/>
        <result column="behavior" property="behavior"/>
        <result column="user_id" property="user_id"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <collection property="negativeFeels" resultMap="negativeFeel"/>
        <collection property="positiveFeels" resultMap="positiveFeel"/>
    </resultMap>

    <!-- マッピング定義(NegativeFeel) -->
    <resultMap type="com.mentalapp.common.entity.NegativeFeel" id="negativeFeel">
        <id column="nf_id" property="id"/>
        <result column="negative_feel_name" property="negativeFeelName"/>
        <result column="nf_created_at" property="createdAt"/>
        <result column="nf_updated_at" property="updatedAt"/>
    </resultMap>

    <!-- マッピング定義(PositiveFeel) -->
    <resultMap type="com.mentalapp.common.entity.PositiveFeel" id="positiveFeel">
        <id column="pf_id" property="id"/>
        <result column="positive_feel_name" property="positiveFeelName"/>
        <result column="pf_created_at" property="createdAt"/>
        <result column="pf_updated_at" property="updatedAt"/>
    </resultMap>

    <!-- 全件取得 -->
    <select id="selectAll" resultType="CbtBasics">
        SELECT
        *
        FROM
        cbt_basics
    </select>

    <!-- １件取得 -->
    <select id="selectByPrimaryKey" resultType="CbtBasics">
        SELECT
        *
        FROM
        cbt_basics
        WHERE
        id = #{id}
    </select>

    <!-- ユーザーIDによる取得 -->
    <select id="selectByUserId" resultType="CbtBasics">
        SELECT
        *
        FROM
        cbt_basics
        WHERE
        user_id = #{userId}
    </select>

    <!-- 登録 -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO
        cbt_basics(fact, mind, body, behavior, user_id, created_at, updated_at)
        VALUES
        (#{fact}, #{mind}, #{body}, #{behavior}, #{user_id}, current_timestamp, current_timestamp)
    </insert>

    <!-- 更新 -->
    <update id="updateByPrimaryKey">
        UPDATE
        cbt_basics
        SET
        fact = #{fact},
        mind = #{mind},
        body = #{body},
        behavior = #{behavior},
        updated_at = current_timestamp
        WHERE
        id = #{id}
    </update>

    <!-- 削除 -->
    <delete id="deleteByPrimaryKey">
        DELETE
        FROM
        cbt_basics
        WHERE
        id = #{id}
    </delete>

    <!-- ユーザーIDに基づいてCbtBasicsリストと関連する感情リストを取得 -->
    <select id="findCbtBasicsFeelsListByUserId" resultMap="cbtBasicsWithFeels">
        SELECT
            cb.id,
            cb.fact,
            cb.mind,
            cb.body,
            cb.behavior,
            cb.user_id,
            cb.created_at,
            cb.updated_at,
            nf.id as nf_id,
            nf.negative_feel_name,
            nf.created_at as nf_created_at,
            nf.updated_at as nf_updated_at,
            pf.id as pf_id,
            pf.positive_feel_name,
            pf.created_at as pf_created_at,
            pf.updated_at as pf_updated_at
        FROM
            cbt_basics cb
            LEFT OUTER JOIN
                cbt_basics_negative_feels cbnf
                ON
                cb.id = cbnf.cbt_basic_id
            LEFT OUTER JOIN
                negative_feels nf
                ON
                cbnf.negative_feel_id = nf.id
            LEFT OUTER JOIN
                cbt_basics_positive_feels cbpf
                ON
                cb.id = cbpf.cbt_basic_id
            LEFT OUTER JOIN
                positive_feels pf
                ON
                cbpf.positive_feel_id = pf.id
        WHERE
            cb.user_id = #{userId}
        ORDER BY
         cb.id, nf.id, pf.id
    </select>
    
        <!-- CbtBasics IDに基づいてCbtBasicsと関連する感情リストを取得 -->
    <select id="selectByPrimaryKeyWithFeels" resultMap="cbtBasicsWithFeels">
        SELECT
            cb.id,
            cb.fact,
            cb.mind,
            cb.body,
            cb.behavior,
            cb.user_id,
            cb.created_at,
            cb.updated_at,
            nf.id as nf_id,
            nf.negative_feel_name,
            nf.created_at as nf_created_at,
            nf.updated_at as nf_updated_at,
            pf.id as pf_id,
            pf.positive_feel_name,
            pf.created_at as pf_created_at,
            pf.updated_at as pf_updated_at
        FROM
            cbt_basics cb
            LEFT OUTER JOIN
            cbt_basics_negative_feels cbnf
            ON
            cb.id = cbnf.cbt_basic_id
            LEFT OUTER JOIN
            negative_feels nf
            ON
            cbnf.negative_feel_id = nf.id
            LEFT OUTER JOIN
            cbt_basics_positive_feels cbpf
            ON
            cb.id = cbpf.cbt_basic_id
            LEFT OUTER JOIN
            positive_feels pf
            ON
            cbpf.positive_feel_id = pf.id
        WHERE
            cb.id = #{cbtBasicId}
        ORDER BY
        cb.id, nf.id, pf.id
    </select>
    
    <!-- ユーザーIDに基づいて、ネガティブ感情の出現回数上位3つを取得 -->
    <select id="findTopNegativeFeelingsByUserId" resultType="java.util.HashMap">
        SELECT
            nf.negative_feel_name as negativeFeelName,
            COUNT(cbnf.negative_feel_id) as count
        FROM
            cbt_basics cb
            INNER JOIN cbt_basics_negative_feels cbnf ON cb.id = cbnf.cbt_basic_id
            INNER JOIN negative_feels nf ON cbnf.negative_feel_id = nf.id
        WHERE
            cb.user_id = #{userId}
        GROUP BY
            nf.negative_feel_name
        ORDER BY
            COUNT(cbnf.negative_feel_id) DESC
        LIMIT 3
    </select>
    
</mapper>